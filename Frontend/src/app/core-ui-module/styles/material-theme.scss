@use '@angular/material' as mat;
@import 'variables';

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();
// @include mat.strong-focus-indicators();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$custom-typography: mat.define-typography-config(
    $font-family: $primaryFontFamily,
    $body-1: mat.define-typography-level(100%, normal, 400),
    $body-2: mat.define-typography-level(100%, normal, 600),
    $button: mat.define-typography-level(100%, normal, 400),
    $headline: mat.define-typography-level(150%, normal, 400),
    $title: mat.define-typography-level(130%, normal, 400),
    $input: mat.define-typography-level(inherit, 1.25, 400),
) !default;
// Override typography for all Angular Material, including mat-base-typography and all components.
@include mat.all-component-typographies($custom-typography);
$mat-custom: (
    50: lighten($primary, 50%),
    100: lighten($primary, 40%),
    200: lighten($primary, 30%),
    300: lighten($primary, 20%),
    400: lighten($primary, 10%),
    500: $primary,
    600: darken($primary, 10%),
    700: darken($primary, 20%),
    800: darken($primary, 30%),
    900: darken($primary, 40%),
    A100: lighten($primary, 40%),
    A200: lighten($primary, 30%),
    A400: $primary,
    A700: darken($primary, 20%),
    contrast: (
        50: $textOnPrimaryLight,
        100: $textOnPrimaryLight,
        200: $textOnPrimaryLight,
        300: $textOnPrimaryLight,
        400: $textOnPrimary,
        500: $textOnPrimary,
        600: $textOnPrimary,
        700: $textOnPrimary,
        800: $textOnPrimary,
        900: $textOnPrimary,
        A100: $textOnPrimaryLight,
        A200: $textOnPrimaryLight,
        A400: $textOnPrimary,
        A700: $textOnPrimary,
    ),
);

$candy-app-primary: mat.define-palette($mat-custom);
$candy-app-accent: mat.define-palette($mat-custom);

// The warn palette is optional (defaults to red).
$candy-app-warn: mat.define-palette(mat.$red-palette);

// Create the theme object (a Sass map containing all of the palettes).
$candy-app-theme: mat.define-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);

// Override the themes foreground colors.
// WCAG minimums are
//  - rgba(black, 0.54) for text on white
//  - rgba(black, 0.42) for non-text on white

// For reference: default definition from
// https://github.com/angular/components/blob/master/src/material/core/theming/_palette.scss:

// $dark-dividers: rgba(black, 0.12);
// $dark-disabled-text: rgba(black, 0.38);
// $dark-secondary-text: rgba(black, 0.54);
// $light-theme-foreground-palette: (
//   base:              black,
//   divider:           $dark-dividers,
//   dividers:          $dark-dividers,
//   disabled:          $dark-disabled-text,
//   disabled-button:   rgba(black, 0.26),
//   disabled-text:     $dark-disabled-text,
//   elevation:         black,
//   hint-text:         $dark-disabled-text,
//   secondary-text:    $dark-secondary-text,
//   icon:              rgba(black, 0.54),
//   icons:             rgba(black, 0.54),
//   text:              rgba(black, 0.87),
//   slider-min:        rgba(black, 0.87),
//   slider-off:        rgba(black, 0.26),
//   slider-off-active: rgba(black, 0.38),
// );

$dark-dividers: rgba(black, 0.12);
$dark-disabled-text: rgba(black, 0.54); // increased contrast
$dark-secondary-text: rgba(black, 0.54);
$light-theme-foreground-palette: (
    base: black,
    divider: $dark-dividers,
    dividers: $dark-dividers,
    disabled: $dark-disabled-text,
    disabled-button: rgba(black, 0.26),
    disabled-text: $dark-disabled-text,
    elevation: black,
    hint-text: $dark-disabled-text,
    secondary-text: $dark-secondary-text,
    icon: rgba(black, 0.54),
    icons: rgba(black, 0.54),
    text: rgba(black, 0.87),
    slider-min: rgba(black, 0.87),
    slider-off: rgba(black, 0.26),
    slider-off-active: rgba(black, 0.38),
);

$my-app-theme-custom: map-merge(
    $candy-app-theme,
    (
        foreground: $light-theme-foreground-palette,
    )
);
// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($my-app-theme-custom);
// @include mat.strong-focus-indicators-theme($my-app-theme-custom);

/** custom project specifics */
[matripplecolor='primary'] {
    > .mat-ripple-element {
        background-color: $primary;
        opacity: 0.1;
    }
}
/*
  material toggle buttons
 */
mat-button-toggle-group {
    .mat-button-toggle-checked.mat-button-toggle-appearance-standard {
        color: $textOnPrimary;
        background-color: $primary;
    }
    .mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay {
        background-color: $primary;
    }
    /*
      bugfix: overlay is not big enough
     */
    .mat-button-toggle-checked .mat-button-toggle-focus-overlay {
        border-bottom-width: 100px;
    }
    &.toggle-full-size {
        width: 100%;
        mat-button-toggle {
            flex-grow: 1;
        }
    }
}
.mat-tooltip {
    background-color: $primaryLight;
    color: $textMain !important;
    font-weight: bold;
}
.mat-tab-labels {
    background-color: $actionDialogBackground;
    .mat-tab-label {
        &.cdk-keyboard-focused {
            @include setGlobalKeyboardFocus('border');
        }
        &.mat-tab-label-active {
            opacity: 0.9;
        }
        &.mat-tab-disabled {
            // Disabled styles are already reflected via label color, don't further reduce contrast.
            opacity: 1;
        }
        .tab-icon {
            margin-right: 5px;
        }
    }
}
.mat-tab-group .mat-ink-bar {
    height: 4px;
}
.mat-tab-group.mat-dark {
    .mat-tab-header {
        background-color: $workspaceTopBarBackground;
    }
    .mat-tab-header-pagination .mat-tab-header-pagination-chevron {
        border-color: $workspaceTopBarFontColor;
    }
    .mat-tab-labels {
        background-color: $workspaceTopBarBackground;
        .mat-tab-label {
            color: $workspaceTopBarFontColor;
            &.cdk-keyboard-focused:not(.mat-tab-disabled) {
                background-color: rgba(255, 255, 255, 0.2);
            }
            .mat-ripple-element {
                background-color: rgba(255, 255, 255, 0.1);
            }
        }
    }
    .mat-ink-bar {
        background-color: $primaryLight;
    }
}
// a mat table with clickable columns
.mat-table-clickable {
    .mat-row {
        @include clickable();
        transition: all $transitionNormal;
        &:hover {
            background-color: $itemSelectedBackground;
        }
    }
}
.mat-fab.mat-white,
.mat-mini-fab.mat-white {
    // white background, primary as content color
    color: $primary;
}
.mat-flat-button,
.mat-raised-button,
.mat-fab,
.mat-mini-fab {
    // `color="warn"`
    &.mat-warn {
        // Red background, same as negative
        background-color: $warning;
        color: white;
    }
    &.status-negative {
        background-color: $colorStatusNegative;
        color: white;
    }
    &.status-warning {
        background-color: $colorStatusWarning;
        color: white;
    }
    &.status-positive {
        background-color: $colorStatusPositive;
        color: white;
    }
}
.mat-form-field .mat-button-select-arrow {
    width: 25px;
    height: 25px;
    margin-right: 2px;
    background-color: #fff;
}
// align prefix in input fields
.mat-form-field-appearance-outline .mat-form-field-prefix {
    top: 0.4em !important;
    left: -0.1em;
}
// align subscript/bottom hint to complete left/right
.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper {
    padding: 0 !important;
}
.mat-form-field.mat-form-field-no-padding {
    .mat-form-field-wrapper {
        padding-bottom: 0;
    }
}
.mat-form-field.mat-form-field-max-width {
    .mat-form-field-wrapper {
        width: 100%;
    }
}
// form border on hover
.mat-form-field-appearance-outline .mat-form-field-outline-thick {
    color: $primaryMediumLight;
}
.mat-form-field-dark {
    input,
    textarea {
        caret-color: $primaryDark;
    }
    .mat-form-field-outline,
    .mat-form-field-label {
        color: rgba(0, 0, 0, 0.6);
    }
    &.mat-focused {
        .mat-form-field-outline,
        .mat-form-field-label {
            color: rgba(0, 0, 0, 0.7);
        }
    }
}
.mat-form-field-bright {
    input,
    textarea {
        caret-color: $primaryLight;
    }
    .mat-form-field-outline,
    .mat-form-field-label {
        color: rgba(255, 255, 255, 0.6);
    }
    &.mat-focused {
        .mat-form-field-outline,
        .mat-form-field-label {
            color: rgba(255, 255, 255, 0.7);
        }
    }
}
mat-slide-toggle.mat-primary-bright {
    &.mat-checked {
        .mat-slide-toggle-thumb {
            background-color: $primaryMediumLight;
        }
        .mat-slide-toggle-bar {
            background-color: $primaryLight;
        }
    }
    .mat-slide-toggle-content {
        color: #fff;
    }
}
.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-thumb-container .mat-focus-indicator {
    @include setGlobalKeyboardFocus();
}

// will fix g and y to cut off with custom font
input.mat-input-element,
mat-label,
.mat-select-value {
    line-height: normal;
}
.mat-input-element::placeholder {
    color: $placeholderColor;
}
// will better align the border label for the outlined input
.mat-form-field-appearance-outline {
    $mat-form-field-floating-label-offset: 0.3em;
    // Add the offset value defined above to all relevant default values
    .mat-form-field-label-wrapper {
        top: calc(-0.9375em - #{$mat-form-field-floating-label-offset});
        padding-top: calc(0.9375em + #{$mat-form-field-floating-label-offset});
    }
    .mat-form-field-label {
        top: calc(1.9375em + #{$mat-form-field-floating-label-offset});
    }
    &.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,
    &.mat-form-field-can-float
        .mat-input-server:focus
        + .mat-form-field-label-wrapper
        .mat-form-field-label {
        transform: translateY(calc(-1.68748em - #{$mat-form-field-floating-label-offset}))
            scale(0.75);
    }
}
.mat-autocomplete-high {
    max-height: 350px;
}
.mat-checkbox-inner-container {
    width: 18px !important;
    height: 18px !important;
    margin: 2px 18px auto 0 !important;
    .mat-checkbox-frame {
        border-color: $primary;
        background-color: #fff;
    }
}
.mat-radio-container {
    .mat-radio-outer-circle {
        border-color: $primary;
    }
}
.mat-checkbox-label {
    line-height: 17pt !important;
    font-size: 1rem;
    color: $textMain;
    > .label-secondary {
        line-height: normal !important;
    }
}
.mat-checkbox-disabled {
    $disabled-color: #919191; // 3:1 on #fafafa (fill-color of checkmark)
    &.mat-checkbox-checked,
    &.mat-checkbox-indeterminate {
        .mat-checkbox-background {
            background-color: $disabled-color;
        }
    }
    &:not(.mat-checkbox-checked) {
        .mat-checkbox-frame {
            border-color: $disabled-color;
        }
    }
}
.mat-checkbox.cdk-keyboard-focused .mat-focus-indicator {
    @include setGlobalKeyboardFocus();
}
.mat-flat-button,
.mat-raised-button {
    min-height: 36px;
}
.mat-raised-button {
    color: $primary;
}
.mat-button.mat-cancel {
    color: $textMediumLight;
    &:hover {
        color: $primary;
    }
}
button {
    &.mat-button,
    &.mat-flat-button,
    &.mat-raised-button,
    &.mat-icon-button,
    &.mat-fab {
        &.cdk-keyboard-focused {
            @include setGlobalKeyboardFocus();
        }
    }
}
.mat-button-wrapper {
    position: relative;
    display: flex !important;
    align-items: center;
    justify-content: center;
    > i {
        width: 35px;
    }
}
.mat-button-no-uppercase .mat-button-wrapper {
    text-transform: none;
}
.mat-calendar-table-header-divider {
    display: none;
}
.mat-chip {
    i {
        font-size: 1.45rem;
    }
}
.mat-option {
    font-size: 100%;
    .mat-option-primary {
        line-height: initial;
        font-size: 90%;
    }

    .mat-option-secondary {
        font-size: 75%;
        line-height: initial;
        color: $textLight;
    }
    &:hover:not(.mat-option-disabled),
    .mat-option:focus:not(.mat-option-disabled) {
        background-color: $buttonHoverBackground;
    }
    &.mat-focus-indicator.mat-active::before {
        content: '';
    }
    &.mat-focus-indicator::before {
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        position: absolute;
        box-sizing: border-box;
        pointer-events: none;
        @include setGlobalKeyboardFocus($mode: 'border');
    }
}

label .label-secondary {
    font-size: 90%;
    color: $textLight;
}
/* a badge (usually counter) inside an (icon) button
 */
.mat-button-badge {
    position: absolute;
    right: -3px;
    top: -3px;
    color: $textOnPrimary;
    background-color: $colorStatusNegative;
    border-radius: 50%;
    width: 16px;
    height: 16px;
    font-weight: bold;
    font-size: 0.8em;
    display: flex;
    justify-content: center;
    align-items: center;
}
.monaco-editor {
    background-color: transparent !important;
    mat-label,
    mat-hint {
        padding: 2px 0;
        font-size: 75%;
        color: $textLight;
    }
}
.mat-card-subtitle,
.mat-hint,
.mat-slide-toggle-content {
    color: $textLight;
}

// Show toggle on the right place
.toggle-reverse {
    .mat-slide-toggle-label {
        flex-direction: row-reverse;
    }
    .mat-slide-toggle-content {
        margin-right: 18px;
    }
}
.mat-slide-toggle-twoside {
    display: flex;
    align-items: center;
    > mat-label {
        color: $textLight;
        padding: 0 8px;
    }
}
mat-label.mat-label-standalone {
    font-size: $fontSizeSmall;
    color: $textLight;
}
/* fix for mat select icons */
.mat-select-icon {
    .mat-option-text {
        display: flex;
        align-items: center;
        > i {
            margin-right: 5px;
        }
    }
}
mat-select.mat-select-icon {
    mat-select-trigger {
        max-height: 22px;
        display: flex;
        align-items: center;
        > i {
            color: $textLight;
            margin-right: 5px;
        }
    }
    .mat-select-arrow-wrapper {
        transform: none;
    }
}

.mat-select-panel,
.mat-autocomplete-panel {
    .mat-option:not(.mat-option-disabled) {
        color: $primary;
    }
    .mat-option.mat-selected:not(.mat-option-multiple) {
        background-color: $cardLightBackground;
        font-weight: bold;
    }
}
.mat-chip-list {
    .mat-chip.mat-standard-chip {
        height: unset; // Override height: 1px
        background-color: $primaryLight;
        overflow: hidden;
        &.indeterminate {
            background: repeating-linear-gradient(
                -45deg,
                $primaryLight,
                $primaryLight 5px,
                rgba(0, 0, 0, 0.04) 5px,
                rgba(0, 0, 0, 0.04) 10px
            );
            color: $textLight;
        }
        &.cdk-keyboard-focused {
            @include setGlobalKeyboardFocus();
        }
        .mat-chip-remove {
            // align somewhat townwards for better centering
            line-height: 1.05;
            color: $primary;
            opacity: 1;
        }
    }
}
.mat-menu-panel {
    min-height: initial !important;
    overflow-x: hidden !important; // prevent scrollbars on FF
}

.cdk-drag-preview {
    box-sizing: border-box;
    border-radius: 4px;
    @include materialShadowBottom();
}

.cdk-drag-placeholder {
    opacity: 0.5;
}

.cdk-drag-animating {
    transition: transform $transitionNormal cubic-bezier(0, 0, 0.2, 1);
}
mat-form-field {
    .mat-form-field-suffix {
        > span {
            position: relative;
            top: -0.25em;
            color: $textLight;
            padding-left: 5px;
        }
    }
    &.mat-form-field-disabled {
        .mat-form-field-suffix {
            > span {
                color: $textLight;
                opacity: 0.5;
            }
        }
    }
}

@include contrastMode(global) {
    // We cannot archive sufficient contrast through a Material theme since opacities for color
    // values are hardcoded in the Material component's theme files --- independently of opacities
    // given by the theme.
    .mat-form-field-appearance-outline .mat-form-field-outline:not(.mat-form-field-outline-thick) {
        color: rgba(black, 0.42);
    }
    .cdk-overlay-pane .suggestion-card,
    .cdk-overlay-pane .mat-autocomplete-panel,
    .cdk-overlay-pane .mat-menu-panel,
    .cdk-overlay-pane .mat-tooltip {
        outline: 1px solid rgba(black, 0.42);
    }
}
